"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maintainer: 
"       Amir Salihefendic
"       http://amix.dk - amix@amix.dk
"
" Version: 
"       5.0 - 29/05/12 15:43:36
"
" Blog_post: 
"       http://amix.dk/blog/post/19691#The-ultimate-Vim-configuration-on-Github
"
" Awesome_version:
"       Get this config, nice color schemes and lots of plugins!
"
"       Install the awesome version from:
"
"           https://github.com/amix/vimrc
"
" Syntax_highlighted:
"       http://amix.dk/vim/vimrc.html
"
" Raw_version: 
"       http://amix.dk/vim/vimrc.txt
"
" Sections:
"    -> General
"    -> VIM user interface
"    -> Colors and Fonts
"    -> Files and backups
"    -> Text, tab and indent related
"    -> Visual mode related
"    -> Moving around, tabs and buffers
"    -> Status line
"    -> Editing mappings
"    -> vimgrep searching and cope displaying
"    -> Spell checking
"    -> Misc
"    -> Helper functions
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set nocompatible  "added tarun " Be iMproved!!!
set history=1000

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","
set timeout timeoutlen=3000 ttimeoutlen=100    "added tarunk
"set ttimeout ttimeoutlen=50

" Fast saving
nmap <leader>w :w!<cr>

" Fast editing of the .vimrc       "added tarun
map <leader>e :e! ~/.vimrc<cr>

" When vimrc is edited, reload it  "added tarun
autocmd! bufwritepost ~/.vimrc source ~/.vimrc



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
"set so=7   " CommentedOut tarunk

" Avoid garbled characters in Chinese language windows OS
"let $LANG='en' 
"set langmenu=en
"source $VIMRUNTIME/delmenu.vim
"source $VIMRUNTIME/menu.vim

" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
else
    set wildignore+=.git\*,.hg\*,.svn\*
endif

"Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch 

" Don't redraw while executing macros (good performance config)
set lazyredraw      " or nolazyredraw  try tarunk
"set nolazyredraw      " or nolazyredraw  try tarunk

"Fix slow vim start - clipboard waits for xserver and slows vim
set clipboard=exclude:.*

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch 
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Add a bit extra margin to the left
"set foldcolumn=1

fun! MySys()
    return "linux"
endfun

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable 256 colors
"if version >= 702
if $TERM == 'xterm-256color' || $TERM == 'screen-256color'
    set t_Co=256
else
    set t_Co=16
endif
" Enable syntax highlighting, it sources $VIMRUNTIME/syntax/syntax.vim
syntax enable 

" Show line number for each line nu, nonu
set nonu           " added tarunk

" Set font according to system    " added tarunk
if MySys() == "mac"
  set gfn=Menlo:h14
  set shell=/bin/bash
elseif MySys() == "windows"
" set gfn=Bitstream\ Vera\ Sans\ Mono:h10
  set gfn=Consolas:h11
  set shell=/bin/bash
elseif MySys() == "linux"
  set gfn=Monospace\ 10
  set shell=/bin/bash
endif

" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
"    set guitablabel=%M\ %t
endif

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab, word wrap and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Soft Wrap (wrap line but does not change actual text in the file)
set wrap "Wrap lines
set linebreak "lbr
set nolist "Needed for linebreak to work
"set showbreak=â€¦ "in insert mode - Ctrl-vu2026 (insert unicode)
"set list "Useful to see whitespace differences space tab $
":set breakat? shows on what characters it wraps

"Hard Wrap (insert newline on tw characters)
"set textwidth=1000 "tw=1000
"set formatoptions+=t " fo+=t Needed for textwidth to work
set formatoptions-=t " fo-=t stop insertion of linebreak
"wrapmargin / wm " wrap based on terminal size
"wrapmargin=5: Automatic wrapping at a 5 col right margin
"gq performs a formatting operation

set ai "Auto indent
set si "Smart indent
" Configure C indenting
"set cino=>s,e0,n0,f0,{0,}4,^-1s,:0,=s,g0,h1s,p2,t0,+2,(2,)20,*30


""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <c-space> ?

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Close the current buffer
map <leader>bd :Bclose<cr>:tabclose<cr>gT

" Close all the buffers
map <leader>ba :bufdo bd<cr>

map <leader>l :bnext<cr>
map <leader>h :bprevious<cr>

if version >= 702
    "set showtabline=0 "Never show tabline on the top
    set showtabline=1 "Show tabline on the top when more than one tabs are present
    "set showtabline=2 "Always show tabline on the top

    " Use the arrows to something usefull
    map <c-right> :tabn<cr>
    map <c-n> :tabn<cr>
    "set <m-a>=\ea
    "map <m-a> ggVG
    set <A-a>=\ea
    map <A-a> ggVG
    map <Esc>^[[D ggVG
    map <c-left> :tabp<cr>
    map <c-p> :tabp<cr>
    
    " Useful mappings for managing tabs
    map <leader>tn :tabnew<cr>
    map <leader>to :tabonly<cr>
    map <leader>tc :tabclose<cr>
    map <leader>tm :tabmove 
    map <leader>t<leader> :tabnext 
    
    " Let 'tl' toggle between this and the last accessed tab
    let g:lasttab = 1
    nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
    au TabLeave * let g:lasttab = tabpagenr()

    " Opens a new tab with the current buffer's path
    " Super useful when editing files in the same directory
    map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

    " Specify the behavior when switching between buffers 
    try
        set switchbuf=useopen,usetab,newtab
        set stal=2
    catch
endtry

endif
":verbose set showtabline run in Vim to see who sets it


" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
" Remember info about open buffers on close
set viminfo^=%


""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

"function! RelPath(filename)
function! RelPath()
    let curFile = expand("%:p")  
    let cwd = getcwd()
    "let s = substitute(a:filename, l:cwd . "/" , "", "")
    let s = substitute(l:curFile, l:cwd . "/" , "", "")
    return s
endfunction

function! FileSize()  
    let bytes = getfsize(expand("%:p"))  
    if bytes <= 0  
        return ""  
    elseif bytes < 1024  
        return bytes  
    elseif bytes > 1048576    "1024*1024  
        return (bytes / 1048576) . "M"  
    else  
        return (bytes / 1024) . "K"  
    endif  
endfunction

" Format the status line
if v:version > 700
    "set statusline=\ %{HasPaste()}%F%m\ %r%h\ %w\ %{getcwd()}%h\ \ \ %l/%L:%c
    "set statusline=%F\ %m%w%h%r\ %{split(getcwd(),'/')[-1]}\ \ \ %{FileSize()}:%l/%L:%c
    set statusline=%{RelPath()}\ :%l%m%w%h%r\ %{split(getcwd(),'/')[-1]}\ \ %=%-14.(%l,%c%V%)\ %p%%    " Right aligned file nav info
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap VIM 0 to first non-blank character
"map 0 ^

" Move a line of text using ALT+[jk] or Command+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Ag searching and cope displaying
"    requires ag.vim - it's much better than vimgrep/grep
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" When you press gv you Ag after the selected text
vnoremap <silent> gv :call VisualSelection('gv', '')<CR>

" Open Ag and put the cursor in the right position
map <leader>g :Ag 

"""" Open vimgrep and put the cursor in the right position
"""map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>
"""" Vimgreps in the current file
"""map <leader><space> :vimgrep // <C-R>%<C-A><right><right><right><right><right><right><right><right><right>

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>

" Do :help cope if you are unsure what cope is. It's super useful!
"
" When you search with Ag, display your results in cope by doing:
"   <leader>cc
"
" To go to the next search result do:
"   <leader>n
"
" To go to the previous search results do:
"   <leader>p
"
map <leader>cc :botright cope<cr>
map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
map <leader>n :cn<cr>
map <leader>p :cp<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Quickly open a buffer for scribble
map <leader>q :e ~/buffer<cr>

" Quickly open a markdown buffer for scribble
map <leader>x :e ~/buffer.md<cr>

" Toggle paste mode on and off
"map <leader>pp :setlocal paste!<cr>
set pastetoggle=<f5>

" change cwd to parent directory
map <leader>bb :cd ..<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Mine
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"deleting single characters without updating the default register
noremap x "_x
"to paste in visual mode without updating the default register
"vnoremap p "_dP
vnoremap p "_c<Esc>p

" C style indentation
"set cindent


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => MARVIM
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" to change the macro storage location use the following 
let marvim_store = '/remote/in01home11/tarunk/bin/Vim74/marvim' 
"let marvim_find_key = '<Space>' " change find key from <F2> to 'space'
"let marvim_store_key = 'ms'     " change store key from <F3> to 'ms'
"let marvim_register = 'c'       " change used register from 'q' to 'c'
"let marvim_prefix = 0           " disable default syntax based prefix



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction 

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'gv'
        call CmdLine("Ag \"" . l:pattern . "\" " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction


" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE '
    endif
    return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

if version < 703
    colorscheme darkblue
    finish
endif

"==========================================================================
" Plugins are added here
"==========================================================================
filetype off     " required added tarun
"set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Keep Plugin commands between vundle#begin/end.
" The following are examples of different formats supported.
" plugin on GitHub repo
"Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
"Plugin 'user/L9', {'name': 'newL9'}
" "Brief help
" " :PluginList       - lists configured plugins
" " :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" " :PluginSearch foo - searches for foo; append `!` to refresh local cache
" " :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"

"Plugin 'scrooloose/syntastic'
"Plugin 'scrooloose/nerdtree'
"Plugin 'Shougo/unite.vim'
"https://www.youtube.com/watch?v=knSFZCKMy20
"Plugin 'wincent/command-t'

"Plugin 'sirver/ultisnips'
"Plugin 'honza/vim-snippets'
Plugin 'scrooloose/nerdcommenter'
"Plugin 'haya14busa/incsearch.vim'
Plugin 'easymotion/vim-easymotion'
"Plugin 'vim-airline/vim-airline'
Plugin 'brookhong/cscope.vim'
" Required for plugin 'xolox/vim-easytags'
Plugin 'xolox/vim-misc'
" Automated tag generation and syntax highlighting in Vim
Plugin 'xolox/vim-easytags'
" Plugin for browsing the tags of the 'CURRENT FILE' and get an overview of its structure. It generated tags on the fly in the memory.
"Plugin 'majutsushi/tagbar'
"source code browser plugin for Vim and provides an overview of the structure of source code files and allows you to efficiently browse through source code files for different programming languages
Plugin 'taglist.vim'
Plugin 'mileszs/ack.vim'
"Plugin 'rking/ag.vim'

" Color schema plugins - themes
Plugin 'altercation/vim-colors-solarized'
Plugin 'chriskempson/vim-tomorrow-theme'
Plugin 'w0ng/vim-hybrid'
Plugin 'reedes/vim-thematic'


" All of your Plugins must be added before the following line
call vundle#end()            " required

"==========================================================================
""" Config for installed plugins
"==========================================================================
" Config Plugin 'haya14busa/incsearch.vim'
"let g:incsearch#auto_nohlsearch = 1
"let g:incsearch#auto_nohlsearch = 0
"map /  <Plug>(incsearch-forward)
"map ?  <Plug>(incsearch-backward)
"map g/ <Plug>(incsearch-stay)

"==========================================================================
" Config Plugin 'vim-airline/vim-airline'
"http://joshldavis.com/2014/04/05/vim-tab-madness-buffers-vs-tabs/
" Enable the list of buffers
"let g:airline#extensions#tabline#enabled = 1
" Show just the filename
"let g:airline#extensions#tabline#fnamemod = ':t'
" This allows buffers to be hidden if you've modified a buffer.
" This is almost a must if you wish to use buffers in this way.
"set hidden
" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
"nmap <leader>T :enew<cr>
" Move to the next buffer
"nmap <leader>l :bnext<CR>
" Move to the previous buffer
"nmap <leader>h :bprevious<CR>
" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
"nmap <leader>bq :bp <BAR> bd #<CR>
" Show all open buffers and their status
"nmap <leader>bl :ls<CR>

"==========================================================================
" Config Plugin 'brookhong/cscope.vim'
" :cs show to see cscope connection
" csto to use cscope-db for ctags jumps ":cs find g"
"let g:cscope_cmd = "cscope -c -q"
let g:cscope_cmd = "cscope -c"
let g:cscope_auto_update = 0
"let g:cscope_interested_files
nnoremap <leader>l :call ToggleLocationList()<CR>
nnoremap <leader>fa :call CscopeFindInteractive(expand('<cword>'))<CR>
" s: Find this C symbol
nnoremap  <leader>fs :call CscopeFind('s', expand('<cword>'))<CR>
" g: Find this definition
nnoremap  <leader>fg :call CscopeFind('g', expand('<cword>'))<CR>
" d: Find functions called by this function
nnoremap  <leader>fd :call CscopeFind('d', expand('<cword>'))<CR>
" c: Find functions calling this function
nnoremap  <leader>fc :call CscopeFind('c', expand('<cword>'))<CR>
" t: Find this text string
nnoremap  <leader>ft :call CscopeFind('t', expand('<cword>'))<CR>
" e: Find this egrep pattern
nnoremap  <leader>fe :call CscopeFind('e', expand('<cword>'))<CR>
" f: Find this file
nnoremap  <leader>ff :call CscopeFind('f', expand('<cword>'))<CR>
" i: Find files #including this file
nnoremap  <leader>fi :call CscopeFind('i', expand('<cword>'))<CR>

"==========================================================================
" Config Plugin 'xolox/vim-easytags'
let g:easytags_cmd = '/remote/us01home42/tarunk/util/ctags4vi'
set cpoptions+=d
set tags=./tagsVim;
let g:easytags_dynamic_files = 2
" Disable default event (BufWritePost) on file write as it slow down vim
let g:easytags_events = []
let g:easytags_auto_highlight = 0
"let g:easytags_include_members = 1

"==========================================================================
" Config Plugin vim-colors-solarized
let g:solarized_termcolors = 256
let g:solarized_contrast  = "high"
"let g:solarized_visibility= "high"

"==========================================================================
" Config Plugin 'mileszs/ack.vim'
if executable('ag')
      let g:ackprg = 'ag --vimgrep'
endif
"" Opens quickfix results window and these mappings works
"?    a quick summary of these keys, repeat to close
"o    to open (same as Enter)
"O    to open and close the quickfix window
"go   to preview file, open but maintain focus on ack.vim results
"t    to open in new tab
"T    to open in new tab without moving to it
"h    to open in horizontal split
"H    to open in horizontal split, keeping focus on the results
"v    to open in vertical split
"gv   to open in vertical split, keeping focus on the results
"q    to close the quickfix window

"==========================================================================
" Enable filetype plugins
set lpl               "added tarunk
filetype plugin on    " required
filetype indent on    " required

" Set colorschema
set background=dark
"try
"colorscheme desert
"colorscheme ron    " changed tarunk
"colorscheme solarized
"colorscheme hybrid
colorscheme Tomorrow-Night
"colorscheme Tomorrow-Night-Eighties
"catch
"endtry

"==========================================================================
" Debug
" :messages - shows all warnings, errors, and informational messages 
" Run vim with vim -V9myVimLog - debug level 9
"set verbose=1 " or vbs=1
function! ToggleVerbose()
    if !&verbose
        set verbosefile=~/.vim/verbose.log
        set verbose=15
    else
        set verbose=0
        set verbosefile=
    endif
endfunction

"==========================================================================

